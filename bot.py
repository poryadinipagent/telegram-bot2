import asyncio
import os
import json
from datetime import datetime

import aiosqlite
import feedparser
from aiocron import crontab
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery, FSInputFile,
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# === CONFIG ===
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHANNEL_USERNAME = "@poryadindom"
PDF_FILE_PATH = "file.pdf"
DB_PATH = "users.db"
NEWS_FEED = "https://yandex.ru/news/rubric/real_estate.rss"

# City districts from official sources
DISTRICTS = {
    "krasnodar": [
        "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π", "–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–π",
        "–°–µ–≤–µ—Ä–Ω—ã–π", "–ó–∞–ø–∞–¥–Ω—ã–π", "–Æ–±–∏–ª–µ–π–Ω—ã–π"
    ],
    "moscow": [
        "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–°–µ–≤–µ—Ä–Ω—ã–π", "–í–æ—Å—Ç–æ—á–Ω—ã–π",
        "–ó–∞–ø–∞–¥–Ω—ã–π", "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π", "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π"
    ],
    "spb": [
        "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π", "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π",
        "–ù–µ–≤—Å–∫–∏–π", "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π", "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π"
    ],
}

# === Bot initialization ===
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(bot)

# === Database helpers ===
CREATE_TABLE = """
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT, goal TEXT, property TEXT,
    city TEXT, district TEXT, mortgage TEXT,
    handover TEXT, finishing TEXT, phone TEXT,
    created_at TEXT
);
"""
async def get_db():
    conn = await aiosqlite.connect(DB_PATH)
    await conn.execute(CREATE_TABLE)
    await conn.commit()
    return conn

async def upsert_user(uid: int, **fields):
    conn = await get_db()
    await conn.execute(
        "INSERT OR IGNORE INTO users(user_id, created_at) VALUES(?,?)",
        (uid, datetime.utcnow().isoformat())
    )
    if fields:
        cols = ", ".join(f"{k}=?" for k in fields)
        vals = list(fields.values()) + [uid]
        await conn.execute(f"UPDATE users SET {cols} WHERE user_id=?", vals)
    await conn.commit()
    await conn.close()

async def iterate_users():
    conn = await get_db()
    async with conn.execute("SELECT user_id FROM users") as cur:
        async for row in cur:
            yield row[0]
    await conn.close()

async def get_user_count():
    conn = await get_db()
    cur = await conn.execute("SELECT COUNT(*) FROM users")
    (count,) = await cur.fetchone()
    await conn.close()
    return count

async def mass_send(text: str, markup=None):
    async for uid in iterate_users():
        try:
            await bot.send_message(uid, text, reply_markup=markup)
        except:
            continue

# === Start & Subscription ===
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    await upsert_user(user_id, name=message.from_user.full_name)
    member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
    if member.status not in ("member","creator","administrator"):
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚û°Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                    url=f"https://t.me/{CHANNEL_USERNAME[1:]}"
                )]
            ]
        )
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
            reply_markup=kb
        )
        return
    await ask_goal(message)

async def ask_goal(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üè° –î–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", callback_data="goal_live")
    kb.button(text="üíº –î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", callback_data="goal_invest")
    await message.answer(
        "–í—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è –∂–∏–∑–Ω–∏ –∏–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏?",
        reply_markup=kb.as_markup()
    )

@dp.callback_query(F.data.startswith("goal_"))
async def handle_goal(cb: CallbackQuery):
    goal = cb.data.split("_",1)[1]
    await upsert_user(cb.from_user.id, goal=goal)
    kb = InlineKeyboardBuilder()
    for txt, code in [("1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è","1"),("2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è","2"),("3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è","3"),("üè† –î–æ–º","house"),("–°—Ç—É–¥–∏—è","studio")]:
        kb.button(text=txt, callback_data=f"type_{code}")
    await cb.message.answer("–ö–∞–∫–æ–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.as_markup())
    await cb.answer()

@dp.callback_query(F.data.startswith("type_"))
async def handle_type(cb: CallbackQuery):
    prop = cb.data.split("_",1)[1]
    await upsert_user(cb.from_user.id, property=prop)
    kb = InlineKeyboardBuilder()
    for city in DISTRICTS:
        label = city.upper() if city=="spb" else city.capitalize()
        kb.button(text=label, callback_data=f"city_{city}")
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ / —Ä–µ–≥–∏–æ–Ω", reply_markup=kb.as_markup())
    await cb.answer()

@dp.callback_query(F.data.startswith("city_"))
async def handle_city(cb: CallbackQuery):
    city = cb.data.split("_",1)[1]
    await upsert_user(cb.from_user.id, city=city)
    districts = DISTRICTS.get(city, [])
    kb = InlineKeyboardBuilder()
    for d in districts:
        key = d.replace(" ","_").lower()
        kb.button(text=d, callback_data=f"district_{key}")
    await cb.message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=kb.as_markup())
    await cb.answer()

@dp.callback_query(F.data.startswith("district_"))
async def handle_district(cb: CallbackQuery):
    district = cb.data.split("_",1)[1]
    await upsert_user(cb.from_user.id, district=district)
    await ask_mortgage(cb.message)
    await cb.answer()

async def ask_mortgage(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üë®‚Äçüë©‚Äçüëß –°–µ–º–µ–π–Ω–∞—è –∏–ø–æ—Ç–µ–∫–∞ ‚Äì –¥–∞", callback_data="family_yes")
    kb.button(text="‚ùå –ù–µ—Ç —Å–µ–º–µ–π–Ω–æ–π", callback_data="family_no")
    await message.answer(
        "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ª–∏ –í—ã —Å–µ–º–µ–π–Ω—É—é –∏–ø–æ—Ç–µ–∫—É? (—Ä–µ–±—ë–Ω–æ–∫ –¥–æ¬†7¬†–ª–µ—Ç –∏–ª–∏ –¥–≤–æ–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö)",
        reply_markup=kb.as_markup()
    )

@dp.callback_query(F.data.startswith("family_"))
async def handle_family(cb: CallbackQuery):
    choice = cb.data.split("_",1)[1]
    val = "family" if choice=="yes" else "no_family"
    await upsert_user(cb.from_user.id, mortgage=val)
    if choice=="no":
        kb = InlineKeyboardBuilder()
        kb.button(text="üèñ –ü–æ–±–µ—Ä–µ–∂—å–µ –ö–ö", callback_data="install_coast")
        kb.button(text="üèô –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", callback_data="install_krasnodar")
        await cb.message.answer(
            "–¢–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=kb.as_markup()
        )
    else:
        await ask_handover(cb.message)
    await cb.answer()

@dp.callback_query(F.data.startswith("install_"))
async def handle_install(cb: CallbackQuery):
    loc = cb.data.split("_",1)[1]
    await upsert_user(cb.from_user.id, mortgage=f"install_{loc}")
    await ask_handover(cb.message)
    await cb.answer()

async def ask_handover(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üè¢ –¢–æ–ª—å–∫–æ —Å–¥–∞–Ω–Ω—ã–µ", callback_data="hd_now")
    kb.button(text="‚è≥ –ì–æ—Ç–æ–≤ –∂–¥–∞—Ç—å", callback_data="hd_wait")
    await message.answer("–í–∞–∂–Ω–æ –ª–∏, —á—Ç–æ–±—ã –¥–æ–º —É–∂–µ —Å–¥–∞–Ω?", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("hd_"))
async def handle_handover(cb: CallbackQuery):
    val = cb.data.split("_",1)[1]
    await upsert_user(cb.from_user.id, handover=val)
    kb = InlineKeyboardBuilder()
    kb.button(text="üî® –° —Ä–µ–º–æ–Ω—Ç–æ–º", callback_data="finish_ready")
    kb.button(text="üõ† –ü–æ–¥—á–∏—Å—Ç–æ–≤–∞—è", callback_data="finish_grey")
    await cb.message.answer("–í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∂–∏–ª—å–µ?", reply_markup=kb.as_markup())
    await cb.answer()

@dp.callback_query(F.data.startswith("finish_"))
async def handle_finish(cb: CallbackQuery):
    val = cb.data.split("_",1)[1]
    await upsert_user(cb.from_user.id, finishing=val)
    kb = ReplyKeyboardMarkup(        
        keyboard=[[KeyboardButton(text="üì± –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],        
        resize_keyboard=True, one_time_keyboard=True    
    )
    await cb.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)    
    await cb.answer()

@dp.message(F.contact)
async def handle_contact(msg: Message):
    await upsert_user(msg.from_user.id, phone=msg.contact.phone_number)
    conn = await get_db()
    cur = await conn.execute("SELECT * FROM users WHERE user_id=?", (msg.from_user.id,))
    row = await cur.fetchone()
    await conn.close()
    parts = [f"–¶–µ–ª—å: {row[2]}", f"–¢–∏–ø: {row[3]}", f"–ì–æ—Ä–æ–¥: {row[4]}", f"–†–∞–π–æ–Ω: {row[5]}", f"–ò–ø–æ—Ç–µ–∫–∞: {row[6]}", f"–°–¥–∞—á–∞: {row[7]}", f"–û—Ç–¥–µ–ª–∫–∞: {row[8]}", f"–¢–µ–ª–µ—Ñ–æ–Ω: {row[9]}"]
    await bot.send_message(ADMIN_ID, "üì© –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–∏–ª–∏!")
" + "
".join((parts))
    if os.path.exists(PDF_FILE_PATH):
        await msg.answer_document(FSInputFile(PDF_FILE_PATH), caption="–í—ã–¥–∞—á–∞ —Å–∞–º–æ–≥–æ —Ç–æ–ø–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–±–µ—Ä–µ–∂—å–µ —Å –ü–í –æ—Ç 600 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π")
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏. ‚ú®", reply_markup=types.ReplyKeyboardRemove())

@dp.message()
async def smart_replies(message: Message):
    text = message.text.lower()
    if any(k in text for k in ("–º–æ—Ä–µ","–ø–æ–±–µ—Ä–µ–∂—å–µ")):
        await message.answer("üèñ –û—Ç–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –ø–æ–±–µ—Ä–µ–∂—å–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è! –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
    elif any(k in text for k in ("—Ü–µ–Ω–∞","—Å—Ç–æ–∏–º–æ—Å—Ç—å")):
        await message.answer("üí∞ –£—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äì –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    elif any(k in text for k in ("–∏–ø–æ—Ç–µ–∫","—Ä–∞—Å—Å—Ä–æ—á")):
        await message.answer("üè¶ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–µ–º–µ–π–Ω—É—é –∏–ø–æ—Ç–µ–∫—É –∏ —Ä–∞—Å—Å—Ä–æ—á–∫—É –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç.")
    else:
        await message.answer("ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# Scheduled tasks
@crontab("0 12 */2 * *")
async def scheduled_warmup():
    await mass_send("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –£ –Ω–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ì–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?")

@crontab("0 9 * * 1")
async def weekly_news():
    feed = feedparser.parse(NEWS_FEED)
    items = feed.entries[:3]
    text = "üì∞ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:
"
    for e in items:
        text += f"- <a href="{e.link}">{e.title}</a>
"
    await mass_send(text)

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if message.from_user.id!=ADMIN_ID: return
    count = await get_user_count()
    await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id!=ADMIN_ID: return
    text = message.text.partition(" ")[2]
    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast —Ç–µ–∫—Å—Ç")
        return
    await mass_send(text)
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def main():
    await dp.start_polling()

if __name__=="__main__":
    asyncio.run(main())
